syntax = "proto3";
package skiff;

service Skiff {
  rpc Get(GetRequest) returns (GetReply);
  rpc Insert(InsertRequest) returns (InsertReply);
  rpc Delete(DeleteRequest) returns (DeleteReply);

  rpc AppendEntry(EntryRequest) returns (EntryReply);
  rpc RequestVote(VoteRequest) returns (VoteReply);
  rpc AddServer(ServerRequest) returns (ServerReply);
  rpc RemoveServer(ServerRequest) returns (ServerReply);
}

message GetRequest {
  string key = 1;
}

message GetReply {
  optional bytes value = 1;
}

message InsertRequest {
  string key = 1;
  bytes value = 2;
}

message InsertReply {
  bool success = 1;
}

message DeleteRequest {
  string key = 1;
}

message DeleteReply {
  bool success = 1;
}

enum Action {
  INSERT = 0;
  DELETE = 1;
  CONFIGURE = 2;
}

message Log {
  uint32 index = 1;
  uint32 term = 2;
  Action action = 3;
  string key = 4;
  optional bytes value = 5;
}

message EntryRequest {
  uint32 term = 1;
  string leaderId = 2;
  uint32 prevLogIndex = 3;
  uint32 prevLogTerm = 4;
  repeated Log entries = 5;
  uint32 leaderCommit = 6;
}

message EntryReply {
  uint32 term = 1;
  bool success = 2;
}

message VoteRequest {
  uint32 term = 1;
  string candidateId = 2;
  uint32 lastLogIndex = 3;
  uint32 lastLogTerm = 4;
}

message VoteReply {
  uint32 term = 1;
  bool voteGranted = 2;
}

message ServerRequest {
  string id = 1;
  string address = 2;
}

message ServerReply {
  bool success = 1;
  optional bytes cluster = 2;
}
